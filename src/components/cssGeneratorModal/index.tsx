import { Dispatch, SetStateAction, useEffect, useRef } from "react";
import { UpdateCSS } from "../../hooks/useGeneratorCSS";
import FloatBox from "../floatBox";

interface CssModalProps {
  isOpen: boolean;
  setIsOpen: Dispatch<SetStateAction<boolean>>;
}

export default function CssModal({ isOpen, setIsOpen }: CssModalProps) {
  const { keyframesMemo, cssMemo, generateCss, setGenerateCss } = UpdateCSS();
  const { isCopied, setIsCopied, floatbox } = FloatBox();
  const divRef1 = useRef<HTMLDivElement | null>(null);
  const divRef2 = useRef<HTMLDivElement | null>(null);

  const handleCopy = (ref: React.RefObject<HTMLDivElement | null>) => {
    if (ref.current) {
      navigator.clipboard.writeText(ref.current.innerText).then(() => {
        setIsCopied(true);
      });
    }
  };

  useEffect(() => {
    if (isCopied) {
      const timeoutId = setTimeout(() => setIsCopied(false), 3000);
      return () => clearTimeout(timeoutId);
    }
  }, [isCopied, setIsCopied]);

  return (
    <>
      <div
        className={`${isOpen === true ? "translate-x-0 delay-300" : "translate-x-[105%] delay-200"} absolute inset-0 z-20 mt-6 flex w-[95%] flex-col self-start justify-self-center rounded-lg bg-white p-12 transition-all duration-1000 ease-in-out ${isOpen ? "xs:h-[660px]" : "xs:h-[90%]"} md:h-[95%]`}
      >
        <div className="flex h-[100px] flex-row gap-x-5 self-start pb-8">
          <label
            htmlFor="minify-checkbox"
            className="flex items-center space-x-2"
          >
            <input
              id="minify-checkbox"
              className="peer hidden"
              type="checkbox"
              checked={generateCss.minify ?? false}
              onChange={() =>
                setGenerateCss((prevState) => ({
                  ...prevState,
                  minify: !prevState.minify,
                }))
              }
            />
            <div className="flex h-[22px] w-[22px] cursor-pointer items-center justify-center rounded-full border-2 border-gray-400 transition-colors duration-150 ease-in-out peer-checked:border-0 peer-checked:bg-copied">
              <span
                className={`${generateCss.minify ? "block" : "hidden"} animate-fadeLeft z-10 text-white`}
              >
                ✓
              </span>
            </div>

            <button
              onClick={() =>
                setGenerateCss((prevState) => ({
                  ...prevState,
                  minify: !prevState.minify,
                }))
              }
            >
              Minify
            </button>
          </label>

          <label
            htmlFor="autoprefixer-checkbox"
            className="flex items-center space-x-2"
          >
            <input
              id="autoprefixer-checkbox"
              className="peer mr-2 hidden"
              type="checkbox"
              checked={generateCss.autoprefixer ?? false}
              onChange={() =>
                setGenerateCss((prevState) => ({
                  ...prevState,
                  autoprefixer: !prevState.autoprefixer,
                }))
              }
            />

            <div className="flex h-[22px] w-[22px] cursor-pointer items-center justify-center rounded-full border-2 border-gray-400 transition-colors duration-150 ease-in-out peer-checked:border-0 peer-checked:bg-copied">
              <span
                className={`${generateCss.autoprefixer ? "block" : "hidden"} animate-fadeLeft z-10 text-white`}
              >
                ✓
              </span>
            </div>
            <button
              onClick={() =>
                setGenerateCss((prevState) => ({
                  ...prevState,
                  autoprefixer: !prevState.autoprefixer,
                }))
              }
            >
              Autoprefixer
            </button>
          </label>
        </div>

        <div ref={divRef1} className="h-[40%] w-full overflow-auto bg-bgcolor">
          <code className="whitespace-pre-line text-sm font-normal">
            {cssMemo}
          </code>
        </div>

        <button
          onClick={() => handleCopy(divRef1)}
          className="my-8 self-start bg-navbar px-4 py-1 text-sm font-bold text-white transition-colors duration-100 hover:bg-lightred"
        >
          COPY CLASS
        </button>

        <div ref={divRef2} className="h-full w-full overflow-auto bg-bgcolor">
          <div>
            <span className="text-start text-sm">
              /* ---------------------------------------------- <br />
              * Generated by Animista on 2025-3-15 14:16:39 <br />
              * Licensed under FreeBSD License. <br />* See
              http://animista.net/license for more info. <br />* w:
              http://animista.net, t: @cssanimista <br />*
              ---------------------------------------------- */
              <br />
            </span>
            <span
              className={`${generateCss.minify ? "hidden" : "block"} text-sm`}
            >
              <br />
              /** <br />* ---------------------------------------- <br />*
              animation {generateCss.animationName} <br />*
              ---------------------------------------- <br />
              */
            </span>
            {keyframesMemo}
          </div>
        </div>
        <div className="mt-8 flex justify-between gap-y-2 xs:flex-wrap">
          <button
            onClick={() => handleCopy(divRef2)}
            className="self-start bg-navbar px-4 py-1 text-sm font-bold text-white transition-colors duration-100 hover:bg-lightred"
          >
            COPY KEYFRAMES
          </button>

          <button
            className="group absolute right-0 top-0 h-10 w-10 p-2"
            onClick={() => setIsOpen(false)}
          >
            <span className="absolute flex h-[2px] w-[15px] rotate-[-45deg] justify-self-center bg-navbar transition-all duration-300 ease-in-out group-hover:rotate-0"></span>
            <span className="absolute flex h-[2px] w-[15px] rotate-[45deg] justify-self-center bg-navbar transition-all duration-300 ease-in-out group-hover:rotate-0"></span>
          </button>
          <div className="bottom-10 right-12 ml-auto flex items-center justify-center gap-x-2 text-[15px]">
            <span>Like Animista? Support it!</span>
            <a href="https://www.buymeacoffee.com/ana" target="_blank">
              {" "}
              <img
                src="https://cdn.buymeacoffee.com/buttons/v2/default-red.png"
                className="h-[48px] w-[185px]"
                alt="buymeacoffee"
              />
            </a>
          </div>
        </div>
      </div>
      {floatbox(
        "Css copied",
        "CSS code is copied to your clipboard. Go paste it somewhere!",
      )}
    </>
  );
}
